/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  7                                     |
|   \\  /    A nd           | Web:      www.OpenFOAM.org                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version	 2.0;
    format	 ascii;
    class	 dictionary;
    object	 blockMeshDict;
}

convertToMeters	 1;

x_recy 0.225;
x_cycl 0.22501;
x_out  0.30001;

y_top  0.09;
z_max  0.05;

vertices
(
    // block 0  
    (0 0 0)    // vertex 0
    ($x_recy 0 0)    // vertex 1
    ($x_recy $y_top 0)    // vertex 2
    (0 $y_top 0)    // vertex 3

    (0 0 $z_max)    // vertex 4
    ($x_recy 0 $z_max)    // vertex 5
    ($x_recy $y_top $z_max)    // vertex 6
    (0 $y_top $z_max)    // vertex 7

    // block 1  
    ($x_cycl 0 0)    // vertex 8
    ($x_out  0 0)    // vertex 9
    ($x_out  $y_top 0)    // vertex 10
    ($x_cycl $y_top 0)    // vertex 11

    ($x_cycl 0 $z_max)    // vertex 12
    ($x_out  0 $z_max)    // vertex 13
    ($x_out  $y_top $z_max)    // vertex 14
    ($x_cycl $y_top $z_max)    // vertex 15
);

blocks
(
    // block 0
    hex (0 1 2 3 4 5 6 7)
    (96 64 64)
    simpleGrading (1 1 1)

    // block 0
    hex (8 9 10 11 12 13 14 15)
    (32 64 64)
    simpleGrading (1 1 1)
);

edges
(
);

boundary
(
    inlet
    {
        type            mappedPatch;
        sampleRegion    region0;
        sampleMode      nearestPatchFace;
        samplePatch     cyclicLeft;

        faces
        (
            (0 3 7 4)
        );
    }

    cyclicLeft
    {
        type            cyclic;
        transform       translational;
        neighbourPatch  cyclicRight;
        separationVector (1e-5 0 0);
        faces
        (
            (1 2 6 5)
        );
    }

    groundLeft
    {
        type            wall;
        faces
        (
            (0 1 5 4)
        );
    }

    topLeft
    {
        type            symmetry;
        faces
        (
            (2 3 7 6)
        );
    }

    frontAndBackLeft
    {
        type            symmetry;
        faces
        (
            (0 3 2 1)
            (4 5 6 7)
        );
    }

    cyclicRight
    {
        type            cyclic;
        transform       translational;
        neighbourPatch  cyclicLeft;
        separationVector (-1e-5 0 0);

        faces
        (
            (8 11 15 12)
        );
    }

    outlet
    {
        type            patch;
        faces
        (
            (9 10 14 13)
        );
    }

    groundRight
    {
        type            wall;
        faces
        (
            (8 9 13 12)
        );
    }

    topRight
    {
        type            symmetry;
        faces
        (
            (10 11 15 14)
        );
    }


    frontAndBackRight
    {
        type            symmetry;
        faces
        (
            (8 11 10 9)
            (12 13 14 15)
        );
    }

);

mergPatchPairs
(
);
