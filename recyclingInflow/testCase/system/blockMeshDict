/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  7                                     |
|   \\  /    A nd           | Web:      www.OpenFOAM.org                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version	 2.0;
    format	 ascii;
    class	 dictionary;
    object	 blockMeshDict;
}

convertToMeters	 1.0;

vertices
(
    // block 0  
    (0 0 0)    // vertex 0
    (6 0 0)    // vertex 1
    (6 1 0)    // vertex 2
    (0 1 0)    // vertex 3

    (0 0 1)    // vertex 4
    (6 0 1)    // vertex 5
    (6 1 1)    // vertex 6
    (0 1 1)    // vertex 7

    // block 1  
    (6.5 0 0)    // vertex 8
    (9.5 0 0)    // vertex 9
    (9.5 1 0)    // vertex 10
    (6.5 1 0)    // vertex 11

    (6.5 0 1)    // vertex 12
    (9.5 0 1)    // vertex 13
    (9.5 1 1)    // vertex 14
    (6.5 1 1)    // vertex 15

);

blocks
(
    // block 0
    hex (0 1 2 3 4 5 6 7)
    (6 2 2)
    simpleGrading (1 1 1)

    // block 0
    hex (8 9 10 11 12 13 14 15)
    (3 2 2)
    simpleGrading (1 1 1)
);

edges
(
);

boundary
(
    Inlet
    {
        type            mappedPatch;
        sampleRegion    region0;
        sampleMode      nearestPatchFace;
        samplePatch     CyclicLeft;

        faces
        (
            (0 3 7 4)
        );
    }

    CyclicLeft
    {
        type            cyclic;
        transform       translational;
        neighbourPatch  CyclicRight;
        separationVector (0.5 0 0);
        faces
        (
            (1 2 6 5)
        );
    }

    GroundLeft
    {
        type            wall;
        faces
        (
            (0 1 5 4)
        );
    }

    TopLeft
    {
        type            symmetry;
        faces
        (
            (2 3 7 6)
        );
    }

    FrontAndBackLeft
    {
        type            symmetry;
        faces
        (
            (0 3 2 1)
            (4 5 6 7)
        );
    }

    CyclicRight
    {
        type            cyclic;
        transform       translational;
        neighbourPatch  CyclicLeft;
        separationVector (-0.5 0 0);

        faces
        (
            (8 11 15 12)
        );
    }

    Outlet
    {
        type            patch;
        faces
        (
            (9 10 14 13)
        );
    }

    GroundRight
    {
        type            wall;
        faces
        (
            (8 9 13 12)
        );
    }

    TopRight
    {
        type            symmetry;
        faces
        (
            (10 11 15 14)
        );
    }


    FrontAndBackRight
    {
        type            symmetry;
        faces
        (
            (8 11 10 9)
            (12 13 14 15)
        );
    }

);

mergPatchPairs
(
);
