/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  4.x                                   |
|   \\  /    A nd           | Web:      www.OpenFOAM.org                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       volVectorField;
    object      U;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

dimensions      [0 1 -1 0 0 0 0];

internalField   uniform (0 0 0);

boundaryField
{
    wall-4
    {
        type            fixedValue;
        value           uniform (0 0 0);
    }

//////////////////////////////////////////////////////////////////////////////////////////////////
/*
    velocity-inlet-5
    {
        type            fixedValue;
        value           uniform (2 0 0);
    }
*/

    velocity-inlet-5
    {
        type            fixedValue;
        value           #codeStream
        {
            codeInclude
            #{
                #include "fvCFD.H"
            #};

            codeOptions
            #{
                -I$(LIB_SRC)/finiteVolume/lnInclude \
                -I$(LIB_SRC)/meshTools/lnInclude
            #};

    	    //libs needed to visualize BC in paraview
    	    codeLibs
    	    #{
        	-lmeshTools \
        	-lfiniteVolume
    	    #};

            code
            #{
                const IOdictionary& d = static_cast<const IOdictionary&>
		(
                    dict.parent().parent()
                );
                const fvMesh& mesh = refCast<const fvMesh>(d.db());
                const label id = mesh.boundary().findPatchID("velocity-inlet-5");
                const fvPatch& patch = mesh.boundary()[id];

                //vectorField U(mesh.boundary()[id].size(), vector(0, 0, 0));
                vectorField U(patch.size(), vector(0, 0, 0));

                const scalar pi = constant::mathematical::pi;
                const scalar U_0   = 2.;	//max vel
		const scalar p_ctr = 8.;	//patch center
                const scalar p_r   = 8.;	//patch radius

                forAll(U, i)
                {
                    const scalar y = patch.Cf()[i][1];
                    //U[i] = vector(U_0*sin(pi*y/r), 0., 0.);
                    U[i] = vector(U_0*(1-(pow(y - p_ctr,2))/(p_r*p_r)), 0., 0.);
                }

/*
                for (int i; i<patch.size() ; i++)
                {
                    const scalar y = patch.Cf()[i][1];
                    U[i] = vector(U_0*(1-(pow(y - p_ctr,2))/(p_r*p_r)), 0., 0.);
                }
*/

                U.writeEntry("", os);
            #};
        };
    }

/*
    velocity-inlet-5
    {
   	type            codedFixedValue;
    	value           uniform (0 0 0);
    	redirectType    parabolicProfile;
   
	code
    	#{
            scalar U_0 = 2, p_ctr = 8, p_r = 8;  
            const fvPatch& boundaryPatch = patch(); 
            const vectorField& Cf = boundaryPatch.Cf(); 
            vectorField& field = *this; 

 	    forAll(Cf, faceI)
            {
                //field[faceI] = vector(U_0*(Cf[faceI].y()/4 - pow(Cf[faceI].y(),2)/pow(p_r,2)),0,0);
                field[faceI] = vector(U_0*(1-(pow(Cf[faceI].y()-p_ctr,2))/(p_r*p_r)),0,0);

	    	//To acces time use this->db().time().value();	
                //field[faceI] = vector(sin(this->db().time().value())*U_0*(1-(pow(Cf[faceI].y()-p_ctr,2))/(p_r*p_r)),0,0); 
	    }

   	#};         

  	codeOptions
  	#{

            -I$(LIB_SRC)/finiteVolume/lnInclude \
            -I$(LIB_SRC)/meshTools/lnInclude

   	#};

  	codeInclude
   	#{
      	    #include "fvCFD.H"
      	    #include <cmath>
     	    #include <iostream>
  	#};
    }
*/
//////////////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////////////////////

    velocity-inlet-6
    {
        type            fixedValue;
        value           uniform (0 3 0);
    }
 

/*
    velocity-inlet-6
    {
        type            fixedValue;
        value           #codeStream
        {
            codeInclude
            #{
                #include "fvCFD.H"
            #};

            codeOptions
            #{
                -I$(LIB_SRC)/finiteVolume/lnInclude \
                -I$(LIB_SRC)/meshTools/lnInclude
            #};

    	    //libs needed to visualize BC in paraview
    	    codeLibs
    	    #{
        	-lmeshTools \
        	-lfiniteVolume
    	    #};

            code
            #{
                const IOdictionary& d = static_cast<const IOdictionary&>
		(
                    dict.parent().parent()
                );
                const fvMesh& mesh = refCast<const fvMesh>(d.db());
                const label id = mesh.boundary().findPatchID("velocity-inlet-6");
                const fvPatch& patch = mesh.boundary()[id];

                //vectorField U(mesh.boundary()[id].size(), vector(0, 0, 0));
                vectorField U(patch.size(), vector(0, 0, 0));

                const scalar U_0   = 3.;	//max vel
                const scalar p_ctr = 54.5;	//patch center
                const scalar p_r   = 2;		//patch radius

                forAll(U, i)
                {
                    const scalar x = patch.Cf()[i][0];
                    U[i] = vector(0., U_0*(1-(pow(x - p_ctr,2))/(p_r*p_r)), 0.);
                }

                U.writeEntry("", os);
            #};
        };
      }
*/

/*
    velocity-inlet-6
    {
   	type            codedFixedValue;
    	value           uniform (0 0 0);
    	redirectType    parabolicProfile1;
   
	code
    	#{
            scalar U_0 = 3, p_ctr = 54.5, p_r = 2;  
            const fvPatch& boundaryPatch = patch(); 
            const vectorField& Cf = boundaryPatch.Cf(); 
            vectorField& field = *this; 

 	    forAll(Cf, faceI)
            {
	    	//To acces time use this->db().time().value();	
                field[faceI] = vector(0,U_0*(1-(pow(Cf[faceI].x()-p_ctr,2))/(p_r*p_r)),0);
	    }

   	#};         

  	codeOptions
  	#{

            -I$(LIB_SRC)/finiteVolume/lnInclude \
            -I$(LIB_SRC)/meshTools/lnInclude

   	#};

  	codeInclude
   	#{
      	    #include "fvCFD.H"
      	    #include <cmath>
     	    #include <iostream>
  	#};
      }
*/
//////////////////////////////////////////////////////////////////////////////////////////////////

    pressure-outlet-7
    {
        type            zeroGradient;
    }

    wall-8
    {
        type            fixedValue;
        value           uniform (0 0 0);
    }

    frontAndBackPlanes
    {
        type            empty;
    }
}

// ************************************************************************* //
